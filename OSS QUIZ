[2]

1. 버전관리 소프트웨어 - bazzar, mercurial, Git

2. 버전관리에서 폴더, 버전관리 위한 파일을 저장해 두는 곳 - repository

3. Git의 기능
- 소스 코드의 변경 사항을 추적하는 데 사용
- 소스 코드 관리에 분산 버전, 제어도구가 사용
- 여러 개의 평행 분기를 통해 비선형 개발을 지원

4. A website that hosts repositpries online, making it eaeier for developer to share code
개발자가 코드를 더 쉽게 공유할 수 있도록 온라인에서 저장소를 호스팅하는 웹사이트
-> anaconda

5. 원격 저장소의 변경 사항을 지역 저장소로 내려받는 용어 - pull
-restore : 작업 트리(Working Directory)의 파일을 특정 상태로 되돌릴 때 사용
- reset : 커밋이나 스테이지 상태를 이전 상태로 되돌리거나 삭제할 때 사용
- push : 로컬 저장소의 변경 사항(커밋)을 원격 저장소에 업로드

주관식. 시간 흐름에 따라 파일 집합에 대한 변경 사항을 추적, 관리하는 소프트웨어
-> 버전 관리 시스템

[3]

1.  깃 설정 범위 - system, global, local

2. 현재 폴더 하부에 basic이라는 이름의 저장소를 생성하는 명령어
- git init basic

3. MCS가 개발하는 OSS 편집기 - VS CODE

4. 폴더의 파일 목록이 화면에 보이는 리눅스 명령어 - ls
- pwd : Print Working Directory의 약자로, 현재 터미널에서 작업 중인 디렉터리(폴더)의 경로를 출력
- rm : Remove의 약자로 파일 또는 디렉터리를 삭제
- mkdir : Make Directory의 약자로, 새 디렉터리(폴더)를 만드는 명령어

5. 파일 내용을 화면에 출력하는 리눅스 명령어 - cat
- echo : 문자열을 출력하거나 텍스트 파일을 생성
- ls : 디렉터리 내의 파일 및 폴더 목록을 표시
- cp : 파일이나 디렉터리를 복사

주관식. 텍스트 파일 a.txt에 저장하는 한 줄의 리눅스 명령어
- $ echo hello > a.cat

[4]

1. Git의 세 가지 영역 - 작업 영역, 스테이징 영역, 깃 저장소 영역

2. Git 저장소의 현재 상태 확인하는 Git 명령어 - status
- config : Git의 설정 값을 관리
- add : Git이 변경된 파일을 추적하도록 스테이징
- commit : 스테이징된 파일을 로컬 저장소에 기록하는 명령어

3. Git 커밋 이력을 보기위한 깃 명령어 - log
- pull : Git에서 원격 저장소의 변경 사항을 로컬 저장소로 가져와 병합

4. Git에서 과거 버전으로 이동하는 Git 명령어 - checkout
- branch : Git 저장소 내의 브랜치(branch)를 관리
- show : 커밋, 브랜치, 태그 등 Git 객체의 상세 정보를 출력
- add : 변경된 파일을 스테이징 영역에 추가하는 데 사용

5. Git 명령어 log옵션 - --oneline, --reverse, --graph
- -am : 커밋 명령어 옵션

주관식. Git에서 바로 이전 버전만의 커밋 정보를 확인하는 명령어
- $ git show HEAD~

[5]

1. 스테이징 영역과 작업 디렉토리의 파일을 비교하는 깃 명령어 - git diff

2. 작업 디렉토리와 스테이징 영역에서 모두 file을 삭제하는 명령어 - git rm file

3. 파일의 상태 정보 umtracked임을 표현 - ??
- A : 스테이징 영역에 추가
- D : 파일이 삭제된 상태
- M : 파일이 수정된 상태

4. 직업 디렉토리의 파일 f를 스테이징 영역의 파일 상태로 복구하는 명령어 - git restore f

5. Git에서 사용하는 의미가 다른 하나 - HEAD(현재 체크아웃된 브랜치 또는 커밋을 가리키는 포인터)
- HEAD^ : HEAD의 부모 커밋, 현재 커밋에서 바로 이전 커밋
- HEAD~ : HEAD에서 n 단계 이전의 커밋
- HEAD~1 : HEAD에서 한 단계 이전의 커밋

주관식. 현재 Git 저장소 상태를 스테이징 영역과 작업 디렉토리에 함께 복원하는 명령어
- $ git restore --source=HEAD --staged --worktree f

[7]

1. 기능이 다른 명령어 - $ git restore hotfix

2. 버전 이름을 명명하는 Git 명령어 - $ git tag

3. 브랜치의 설명 - 또 다른 작업의 흐름

4. 현재의 전체 브랜치 목록을 보는 명령어 - $ git branch

5. 현재 브랜치와 관계없이 모든 브랜치의 커밋 이력을 보는 옵션 - --all
- --oneline : 각 커밋을 한 줄로 요약
- --graph : 커밋 간의 관계를 ASCII 그래프로 시각적으로 표현
- --patch : 각 커밋에서 변경된 내용을 패치 형식으로 보여줌

주관식. 다음 명령(detach head)로 이동한 상태 - $ git checkout HEAD^^

[8]

1. 현재 우리가 버전관리를 위해 사용하는 CLI 방식의 Git 도구 - Git bash

2. Git Hub에서 다른 사용자 계정의 저장소를 자신의 Git Hub 저장소로 복사하는 것 - fork

3. 지역저장소의 변경 사항을 원격저장소로 저장하는 용어 - push

4. 원격 저장소 전첸를 지역 저장소에 복제 - clone
- cherry-pick : 특정 커밋을 선택하여 현재 브랜치에 적용
- rebase : 브랜치의 기반을 다른 브랜치로 변경하는 작업

5. 원격저장소의 변경 사항을 지역 저장소로 내려받는 용어 - pull

주관식. 복제 명령어 clone에 의해 설정되는 원격 저장소의 별칭 - origin

