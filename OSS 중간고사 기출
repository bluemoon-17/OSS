[기출 문제]

1-1. 저장소(repository) - 버전관리에서 파일이나 폴더, 버전관리를 위한 관련 파일을 저장해두는 장소
1-2. Git Bash - CLI방식으로 command line interface방식의 약자이다.
1-3. 깃(git) - 분산형 버전 관리 시스템(DVCS)으로, 소스 코드와 파일의 변경 이력을 추적하고, 여러 개발자가 협업할 수 있도록 도와주는 도구
     *깃의 원격 저장과 협업, 소스관리를 지원하는 웹 호스팅 서비스 - Git Hub

2-1. 커밋(commit) - 버전 관리를 위해 스테이지에 올린 파일들을 한 묶음으로 스냅샷을 찍는 것
2-2. --all - 현재 브랜치와 관계없이 모든 브랜치의 커밋 이력을 보는 명령어 $git log --all

3-1. 깃의 기능
     1. 소스 코드의 변경 사항을 추적하는데 사용
     2. 소스 코드 관리에 분산 버전 제어 도구가 사용
     3. 여러 개의 평행 분기를 통해 비선형 개발을 지원

3-2. 브랜치의 설명
     1. 깃의 설정
     2. 임시 저장소
     3. 버전 관리를 하기 전의 공간

3-3. 직업 디렉토리와 스테이징 영역에서 모 file을 삭제하는 깃 명령어 - $ git rm file
  
3-4. 작업 디렉토리의 파일 f를 스테이징 영역의 파일 상태로 복구하는 깃 명령어 - $ git restore f

3-5. 개발자가 Forked된 프로젝트의 원격 저장소인 Upstream에 요청하는 것으로 FOrked된 자신의 저장소에 커밋된 변경 사항을 반영해 달라고 요청하는 명령어 - pull request
     1. tag - 특정 커밋에 태그달기
     2. revert - 특정 커밋 취소
     3. push - 원격 저장소에 변경사항 반영

3-6. 버전 이름을 명명하는 깃 명령어 - $ git tag
- $ git commit -  Git에서 스테이징된 파일의 변경 사항을 저장소에 기록(커밋)하는 데 사용
- $ git history - 일반적으로 Git 명령어에 포함되지 않습니다. 하지만 비슷한 기능을 수행하는 git log 명령을 사용하면 커밋 이력을 확인할 수 있습니다.
- $ git branchRestore - Git의 공식 명령어가 아닙니다. 아마도 브랜치 복구와 관련된 작업을 의미

4. 그림 외우기

5. >, -am, --oneline, checkout, detached, alias, A B
   1. > - 리다이렉션 - 명령 결과를 파일로 저장
   2. -am - 변경된 파일을 스테이징하고 커밋
   3. --oneline - 커밋 내역을 한 줄싹 간결하게 출
   4. checkout - 다른 브랜치나 특정 커밋으로 이용
   5. detached - git checkout <커밋 해시>로 특정 커밋에 이동하면 Detached HEAD 상태가 됩니다.
   6. alias - 긴 git 명령어 간단히 단축
